package graph

// このファイルはスキーマに基づいて自動生成されます。リゾルバの実装は
// 生成時にコピーされ、不明なコードは末尾に移動されます。
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"

	"github.com/makoto-teieki/stock-trader-api/graph/model"
)

// CreateTodo は createTodo フィールドのリゾルバです。
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// Todos は todos フィールドのリゾルバです。
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// Mutation は MutationResolver の実装を返します。
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query は QueryResolver の実装を返します。
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// PlaceOrder is the resolver for the placeOrder field.
func (r *mutationResolver) PlaceOrder(ctx context.Context, code string, quantity int, price float64, orderType string) (*model.Order, error) {
    // 1. 認証チェック
    // ... JWTからユーザーIDを取得 ...

    // 2. トランザクション開始
    tx := r.DB.Begin()
    if tx.Error != nil {
        return nil, tx.Error
    }

    // 3. 残高検証（Repository層経由）
    // ...

    // 4. 立花証券デモAPIに注文を送信
    apiOrderResult, err := r.TradeClient.PlaceOrder(model.OrderParams{Code: code, ...})
    if err != nil {
        tx.Rollback() // 失敗したらロールバック
        return nil, fmt.Errorf("API注文失敗: %w", err)
    }

    // 5. DBに注文情報を保存 (Repository層経由)
    newOrder := &model.Order{ /* ...データ設定... */ }
    if err := r.Repos.Order.Create(newOrder); err != nil {
        tx.Rollback() // 失敗したらロールバック
        return nil, err
    }

    // 6. トランザクションコミット
    tx.Commit()

    // 7. 約定通知（Subscriptions）のトリガー
    // ...

    return newOrder, nil
}